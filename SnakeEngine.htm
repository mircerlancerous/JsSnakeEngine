<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<title>JS Battlesnake</title>
	
	<!--<script src="scenarios.js"></script>-->
	
	<script>
		var BS = {
			setup: {
				game: {id:"317ff4c1-ce0d-40fd-8de3-7c0563b8c62e"},
				turn: 0,
				board: {
					height: 11,
					width: 11,
					food: [
				//		{"x":4,"y":6},
				//		{"x":5,"y":0}
					],
					snakes: [
				//		{"id":"gs_fxdtHS4Ydg3ybVqGRQKpp6gb","name":"mircerlancerous \/ Rando","health":100,"body":[{"x":5,"y":9},{"x":5,"y":9},{"x":5,"y":9}],"shout":""},
				//		{"id":"gs_B3mtTMppGWRDHvyvj66YShbW","name":"mircerlancerous \/ Hungry Rando","health":100,"body":[{"x":1,"y":9},{"x":1,"y":9},{"x":1,"y":9}],"shout":""}
					]
				},
				you: {
			//		"id":"gs_B3mtTMppGWRDHvyvj66YShbW","name":"mircerlancerous \/ Hungry Rando","health":100,"body":[{"x":1,"y":9},{"x":1,"y":9},{"x":1,"y":9}],"shout":""
				}
			},
			
			loadSetup: function(){
				let setup = localStorage.getItem("setup");
				if(!setup){
					return;
				}
				BS.setup = JSON.parse(setup);
			},
			
			saveSetup: function(){
				let setup = JSON.stringify(BS.setup);
				localStorage.setItem("setup",setup);
			},
			
			addSnake: function(obj){
				if(typeof(obj) === 'undefined'){
					obj = {
						id: Date.now(),
						github: document.getElementById("github").value,
						name: document.getElementById("name").value,
						url: document.getElementById("url").value
					};
					document.getElementById("github").value = "";
					document.getElementById("name").value = "";
					document.getElementById("url").value = "";
					BS.setup.board.snakes.push(obj);
					BS.saveSetup();
				}
				let table = document.getElementById("snaketable");
				let count = table.getElementsByTagName("tr").length - 1;
				let newRow = document.createElement("tr");
				let newCell = document.createElement("td");
				newCell.innerText = obj.github;
				newRow.appendChild(newCell);
				newCell = document.createElement("td");
				newCell.innerText = obj.name;
				newRow.appendChild(newCell);
				newCell = document.createElement("td");
				newCell.innerText = obj.url;
				newRow.appendChild(newCell);
				newCell = document.createElement("td");
				let newA = document.createElement("a");
				newA.classList.add("abtn");
				newA.innerText = "remove";
				newA.dataset.id = obj.id;
				newA.addEventListener("click",BS.removeSnake,false);
				newCell.appendChild(newA);
				newRow.appendChild(newCell);
				table.appendChild(newRow);
			},
			
			removeSnake: function(){
				let id = this.dataset.id;
				let elm = this.parentNode;
				while(elm.tagName != "TR"){
					elm = elm.parentNode;
				}
				for(let i=0; i<BS.setup.board.snakes.length; i++){
					if(BS.setup.board.snakes[i].id == id){
						BS.setup.board.snakes.splice(i,1);
						BS.saveSetup();
						break;
					}
				}
				delete elm.parentNode.removeChild(elm);
			},
			
			setBoard: function(currentOnly){
				if(typeof(currentOnly) === 'undefined' || !currentOnly){
					BS.setup.board.width = document.getElementById("boardx").value;
					BS.setup.board.height = document.getElementById("boardy").value;
					BS.saveSetup();
				}
				document.getElementById("boardcurrent").innerText = "x: "+BS.setup.board.width+", y: "+BS.setup.board.height;
			},
			
			setupClick: function(){
				if(BSG.running || BSG.paused){
					return;
				}
				let setup = document.getElementById("setupdiv");
				setup.style.display = "";
				let game = document.getElementById("gamediv");
				game.style.display = "none";
				let i, list = this.parentNode.getElementsByTagName("td");
				for(i=0; i<list.length; i++){
					list[i].classList.add("untabbed");
				}
				this.classList.remove("untabbed");
			},
			
			prepScenario: function(obj,scenario){
				let i, sobj = JSON.parse(JSON.stringify(BSScenarios[scenario]));
				if(!sobj){
					return obj;
				}
				for(i=0; i<obj.board.snakes.length; i++){
					if(sobj.scenario.snakes && i < sobj.scenario.snakes){
						sobj.board.snakes.push(obj.board.snakes[i]);
					}
				}
				return sobj;
			},
			
			gameClick: function(){
				let game = document.getElementById("gamediv");
				if(game.style.display == ""){
					return;
				}
				game.style.display = "";
				let setup = document.getElementById("setupdiv");
				setup.style.display = "none";
				let i, list = this.parentNode.getElementsByTagName("td");
				for(i=0; i<list.length; i++){
					list[i].classList.add("untabbed");
				}
				this.classList.remove("untabbed");
				//prepare the game
				let obj = JSON.parse(JSON.stringify(BS.setup));
				//check for a scenario
				let scen = document.getElementById("scenarios").value;
				if(scen != 'standard'){
					obj = BS.prepScenario(obj,scen);
				}
				obj.game.id = "js-"+Date.now();
				BSG.init(obj,document.getElementById("gametable"));
				
				let newDiv, newBtn, snakediv = document.getElementById("snakediv");
				snakediv.innerHTML = "";
				for(i=0; i<BS.setup.board.snakes.length; i++){
					newDiv = document.createElement("div");
					newDiv.innerHTML = (i+1) + ") "+BS.setup.board.snakes[i].name + " ";
					newBtn = document.createElement("span");
					newBtn.classList.add("abtn");
					newBtn.innerText = "get next move";
					newBtn.dataset.snakeid = BS.setup.board.snakes[i].id;
					newBtn.onclick = BSG.getSnakesNextMoveOnly;
					newDiv.appendChild(newBtn);
					snakediv.appendChild(newDiv);
					newDiv = document.createElement("div");
					newDiv.id = "status" + BS.setup.board.snakes[i].id;
					newDiv.className = "snakestatus";
					snakediv.appendChild(newDiv);
				}
			},
			
			startClick: function(){
				if(BSG.running){
					return;
				}
				//if we need to reset to start a new match
				if(!BSG.paused && BSG.tracking.length > 0){
					//prepare the game
					let obj = JSON.parse(JSON.stringify(BS.setup));
					obj.game.id = "js-"+Date.now();
					BSG.init(obj,document.getElementById("gametable"));
				}
				
				BSG.start();
			},
			
			init: function(){
				BS.loadSetup();
				for(let i=0; i<BS.setup.board.snakes.length; i++){
					BS.addSnake(BS.setup.board.snakes[i]);
				}
				BS.setBoard(true);
				//init tab functionality
				let list = document.getElementsByClassName("tabtable")[0];
				list = list.getElementsByTagName("td");
				list[0].addEventListener("click",BS.setupClick,false);
				list[1].addEventListener("click",BS.gameClick,false);
				//check for scenarios
				if(typeof(window.BSScenarios) !== 'undefined'){
					let newOption, selBox = document.getElementById("scenarios");
					for(i=0; i<BSScenarios.length; i++){
						newOption = document.createElement("option");
						newOption.value = i;
						newOption.innerText = BSScenarios[i].scenario.name;
						selBox.appendChild(newOption);
					}
				}
			}
		};
		
		var BSG = {
			running: false,
			paused: false,
			obj: null,
			table: null,
			tracking: [],
			
			init: function(obj,table){
				//obj.board.food = [];
				obj.turn = 0;
				BSG.obj = obj;
				BSG.table = table;
				BSG.tracking = [];
				
				//console.log(JSON.stringify(obj));
				//assign starting locations and health to the snakes
				let count = 0;
				for(let i=0; i<obj.board.snakes.length; i++){
					if(!obj.board.snakes[i].url){
						continue;
					}
					//only support four snakes unless starting location is improved
					if(count >= 4){
						obj.board.snakes[i].health = 0;
						continue;
					}
					//{"id":1583358216774,"github":"mircerlancerous","name":"Rando","url":"https://dev.offthebricks.com/Battlesnake/api/v1"}
					//{"id":"gs_fxdtHS4Ydg3ybVqGRQKpp6gb","name":"mircerlancerous \/ Rando","health":100,"body":[{"x":5,"y":9},{"x":5,"y":9},{"x":5,"y":9}],"shout":""}
					obj.board.snakes[i].health = 100;
					obj.board.snakes[i].body = BSG.getSnakeStartLocation(count);
					count++;
				}
				BSG.renderBoard();
			},
			
			start: function(){
				if(BSG.running){
					return;
				}
				BSG.running = true;
				let method = "start";
				if(BSG.paused){
					console.log("game resumed");
					BSG.paused = false;
					method = "move";
				}
				else{
					console.log("game started");
					
					BSG.tracking.push(JSON.parse(JSON.stringify(BSG.obj)));
				}
				//start calls to snake servers
				for(i=0; i<BSG.obj.board.snakes.length; i++){
					BSG.getSnakeMove(BSG.obj.board.snakes[i],false,method);
				}
			},
			
			stop: function(){
				if(!BSG.running && !BSG.paused){
					return;
				}
				console.log("game stopped");
				BSG.running = false;
				BSG.paused = false;
				
				//cancel any in progress calls
				
			},
			
			pause: function(){
				if(BSG.paused || !BSG.running){
					return;
				}
				BSG.paused = true;
				BSG.running = false;
				console.log("game paused");
			},
			
			back: function(){
				if(BSG.running || !BSG.paused || BSG.tracking.length == 1){
					if(!BSG.running && !BSG.paused && BSG.tracking.length > 1){
						BSG.paused = true;
					}
					else{
						return;
					}
				}
				let idx = BSG.tracking.length - 1;
				BSG.obj = BSG.tracking.splice(idx,1)[0];
				BSG.renderBoard();
			},
			
			//only support 4 snakes for now
			getSnakeStartLocation: function(idx){
				let arr = [];
				if(typeof(BSG.obj.scenario) !== 'undefined' && typeof(BSG.obj.scenario.start) !== 'undefined'){
					arr.push(Object.assign({},BSG.obj.scenario.start[idx]));
					arr.push(Object.assign({},BSG.obj.scenario.start[idx]));
					arr.push(Object.assign({},BSG.obj.scenario.start[idx]));
					return arr;
				}
				switch(idx){
					case 0:
						arr = [
							{x:3, y:3},
							{x:3, y:3},
							{x:3, y:3}
						];
						break;
					case 1:
						arr = [
							{x:3, y:BSG.obj.board.height - 3},
							{x:3, y:BSG.obj.board.height - 3},
							{x:3, y:BSG.obj.board.height - 3}
						];
						break;
					case 2:
						arr = [
							{x:BSG.obj.board.width - 3, y:3},
							{x:BSG.obj.board.width - 3, y:3},
							{x:BSG.obj.board.width - 3, y:3}
						];
						break;
					case 3:
						arr = [
							{x:BSG.obj.board.width - 3, y:BSG.obj.board.height - 3},
							{x:BSG.obj.board.width - 3, y:BSG.obj.board.height - 3},
							{x:BSG.obj.board.width - 3, y:BSG.obj.board.height - 3}
						];
						break;
					default:break;
				}
				return arr;
			},
			
			getSnakesNextMoveOnly: function(){
				let i, snake, id = this.dataset.snakeid;
				for(i=0; i<BSG.obj.board.snakes.length; i++){
					if(BSG.obj.board.snakes[i].id == id){
						snake = BSG.obj.board.snakes[i];
						break;
					}
				}
				let elm = document.getElementById("move"+snake.id);
				if(elm){
					elm.innerText = "";
				}
				BSG.getSnakeMove(snake,true,"move");
			},
			
			gotSnakesNextMove: function(snake,move){
				let elm = document.getElementById("status"+snake.id);
				if(elm){
					elm.innerText = move;
				}
				else{
					console.log("next move "+snake.id+": "+move);
				}
			},
			
			moves: [],
			getSnakeMove: function(snake,moveOnly,method){
				if(typeof(moveOnly) !== 'boolean'){
					moveOnly = false;
				}
				if(typeof(method) === 'undefined'){
					method = "move";
				}
				if(snake.health <= 0){
					return;
				}
				let url = snake.url;
				if(!url){
					//no api for this snake, so don't move it - must be for a scenario
					return;
				}
				let body = JSON.parse(JSON.stringify(snake));
				body.name = body.github + " / " + body.name;
				let obj = JSON.parse(JSON.stringify(BSG.obj));
				obj.you = body;
				if(method != 'end'){
					BSG.moves.push(snake.id);
				}
				if(url.substring(url.length-1) != "/"){
					url += "/";
				}
				fetch(
					url + method,
					{
						method: "post",
						body: JSON.stringify(obj)
					}
				).then(
					function (response) {
						if (!response.ok) {
							console.error(`HTTP error! status: ${response.status}`);
						}
						else {
							return response.text();
						}
					}
				).then(
					function (response) {
						if(method == 'end'){
							return;
						}
						for(let i=0; i<BSG.moves.length; i++){
							if(BSG.moves[i] == snake.id){
								BSG.moves.splice(i,1);
								break;
							}
						}
						let x=0, y=0;
						if(!response){
							console.error("invalid server response");
							return;
						}
						let move = JSON.parse(response);
						if(moveOnly){
							BSG.gotSnakesNextMove(snake,move.move);
							return;
						}
						if(method == "move"){
							switch(move.move){
								case "up":
									y -= 1;
									break;
								case "down":
									y += 1;
									break;
								case "left":
									x -= 1;
									break;
								case "right":
									x += 1;
									break;
								default:break;
							}
							let ref = snake.body[0];
							snake.body.unshift({x: ref.x + x, y: ref.y + y});
							if(!BSG.checkAteFood(snake)){
								snake.body.splice(snake.body.length - 1, 1);
							}
						}
						else if(method == "start" && move.color){
							snake.color = move.color.replace("#","");
						}
						//if no more snakes to move
						if(!BSG.moves.length){
							if(method == "start"){
								BSG.nextTurn(false);
							}
							else{
								BSG.checkMoves();
							}
						}
					}
				);
			},
			
			checkAteFood: function(snake){
				let j, atefood = false, head = snake.body[0], board = BSG.obj.board;
				for(j=0; j<board.food.length; j++){
					if(head.x == board.food[j].x && head.y == board.food[j].y){
						atefood = true;
						break;
					}
				}
				return atefood;
			},
			
			checkMoves: function(){
				if(!BSG.running){
					return;
				}
				let i, v, j, head, body, elm, died, board = BSG.obj.board;
				for(i=0; i<board.snakes.length; i++){
					if(!board.snakes[i].url || board.snakes[i].dead){
						continue;
					}
					died = false;
					head = board.snakes[i].body[0];
					//check board
					if(head.x < 0 || head.y < 0 || head.x >= board.width || head.y >= board.height){
						board.snakes[i].health = 0;
						died = true;
						board.snakes[i].dead = true;
						elm = document.getElementById("status"+board.snakes[i].id);
						if(elm){
							elm.innerText += " - dead - crashed off board";
						}
					}
					//check snakes
					for(v=0; v<board.snakes.length; v++){
						if(board.snakes[v].dead){
							continue;
						}
						body = board.snakes[v].body;
						for(j=0; j<body.length; j++){
							if(v == i && j == 0){
								continue;
							}
							if(head.x == body[j].x && head.y == body[j].y){
								if(j == 0){
									if(body.length > board.snakes[i].body.length){
										board.snakes[i].health = 0;
										died = true;
										board.snakes[i].dead = true;
										elm = document.getElementById("status"+board.snakes[i].id);
										if(elm){
											elm.innerText += " - dead - head on head collision";
										}
									}
								}
								else{
									board.snakes[i].health = 0;
									died = true;
									board.snakes[i].dead = true;
									elm = document.getElementById("status"+board.snakes[i].id);
									if(elm){
										if(i == v){
											elm.innerText += " - dead - collided with self";
										}
										else{
											elm.innerText += " - dead - collided with another snake";
										}
									}
								}
								break;
							}
						}
					}
					//if snake is still alive
					if(board.snakes[i].health > 0){
						let atefood = false;
						//check food
						for(j=0; j<board.food.length; j++){
							if(head.x == board.food[j].x && head.y == board.food[j].y){
								board.snakes[i].health = 100;
								atefood = true;
								board.food.splice(j,1);
								break;
							}
						}
						if(!atefood){
							board.snakes[i].health--;
							if(board.snakes[i].health <= 0){
								died = true;
								board.snakes[i].dead = true;
								elm = document.getElementById("status"+board.snakes[i].id);
								if(elm){
									elm.innerText += " - dead - starvation";
								}
							}
						}
					}
					
					if(died){
						BSG.getSnakeMove(board.snakes[i],false,"end");
					}
				}
				//update snake health labels
				for(i=0; i<board.snakes.length; i++){
					if(board.snakes[i].url && board.snakes[i].health > 0){
						elm = document.getElementById("status"+board.snakes[i].id);
						if(elm){
							elm.innerText = "health: "+board.snakes[i].health;
						}
					}
				}
				
				BSG.nextTurn(true);
			},
			
			checkGameOver: function(){
				let i, scount = 0, alive = 0, board = BSG.obj.board;
				
				let stoplevel = 0;
				if(board.snakes.length > 1){
					for(i=0; i<board.snakes.length; i++){
						if(!board.snakes[i].url){
							continue;
						}
						scount++;
						if(board.snakes[i].health > 0){
							alive++;
						}
					}
					if(scount > 1){
						stoplevel = 1;
					}
				}
				if(alive <= stoplevel){
					if(alive){
						console.log("standard victory");
					}
					else{
						console.log("all snakes dead");
					}
					return true;
				}
				
				if(!BSG.obj.scenario){
					return false;
				}
				
				//check scenario
				switch(BSG.obj.scenario.victory.type){
					case "food":
						if(board.food.length <= BSG.obj.scenario.victory.quantity){
							console.log("scenario victory");
							return true;
						}
						break;
					default:break;
				}
				
				return false;
			},
			
			nextTurn: function(checkgameover){
				let i, elm, board = BSG.obj.board;
				BSG.renderBoard();
				
				if(BSG.running && !BSG.checkGameOver()){
					BSG.addFood();
					setTimeout(
						function(){
							BSG.tracking.push(JSON.parse(JSON.stringify(BSG.obj)));
							//start calls to snake servers
							for(i=0; i<board.snakes.length; i++){
								BSG.getSnakeMove(board.snakes[i]);
							}
						},
						100
					);
				}
				else{
					//end game
					BSG.stop();
					//send end game to living snakes
					for(i=0; i<board.snakes.length; i++){
						if(board.snakes[i].health > 0){
							BSG.getSnakeMove(board.snakes[i],false,"end");
							elm = document.getElementById("status"+board.snakes[i].id);
							if(elm){
								elm.innerText += " - victory";
							}
						}
					}
				}
			},
			
			addFood: function(){
				if(typeof(BSG.obj.scenario) !== 'undefined' && !BSG.obj.scenario.food){
					return;
				}
				if(BSG.obj.board.food.length >= 20){
					return;
				}
				let val = Date.now() % 2;
				if(val == 0){
					return;
				}
				//odd number so add food
				let i, v, j, snake, m, found, empty = [];
				for(i=0; i<BSG.obj.board.width; i++){
					for(v=0; v<BSG.obj.board.height; v++){
						found = false;
						for(j=0; j<BSG.obj.board.snakes.length; j++){
							snake = BSG.obj.board.snakes[j];
							for(m=0; m<snake.body.length; m++){
								if(snake.body[m].x == i && snake.body[m].y == v){
									found = true;
									break;
								}
							}
						}
						if(!found){
							for(j=0; j<BSG.obj.board.food.length; j++){
								if(BSG.obj.board.food[j].x == i && BSG.obj.board.food[j].y == v){
									found = true;
									break;
								}
							}
						}
						if(!found){
							empty.push({x:i,y:v});
						}
					}
				}
				//pick random empty square
				let len = empty.length / 1000;
				let time = Date.now() + "";
				time = time.substring(time.length - 3);
				time = parseInt(time * len);
				BSG.obj.board.food.push(empty[time]);
			},
			
			getSnakeIdx: function(idx){
				let m, count = 0, list = BSG.obj.board.snakes;
				for(m=0; m<list.length; m++){
					if(m == idx){
						return count;
					}
					if(list[m].url){
						count++;
					}
				}
				return 0;
			},
			
			renderBoard: function(){
				BSG.table.innerHTML = "";
				let i, v, j, m, newRow, newCell, list, str, next, isdead, oolour, x = BSG.obj.board.width, y = BSG.obj.board.height;
				for(i=0; i<y; i++){
					newRow = document.createElement("tr");
					for(v=0; v<x; v++){
						newCell = document.createElement("td");
						str = "";
						//check if cell holds a snake
						list = BSG.obj.board.snakes;
						for(m=0; m<list.length; m++){
							colour = "";
							if(BSG.obj.board.snakes[m].color){
								colour = BSG.obj.board.snakes[m].color;
							}
							isdead = BSG.obj.board.snakes[m].dead;//false;
						//	if(list[m].health <= 0){
						//		isdead = true;
						//	}
							for(j=0; j<list[m].body.length; j++){
								if(list[m].body[j].x == v && list[m].body[j].y == i){
									next = null;
									if(typeof(list[m].body[j+1]) !== 'undefined'){
										next = list[m].body[j+1];
									}
									if(j==0){
										if(list[m].url){
											str = BSG.renderSnake(null,list[m].body[j],next,BSG.getSnakeIdx(m),isdead,colour);
										}
										else{
											str = BSG.renderSnake(null,list[m].body[j],next,-1,isdead,colour);
										}
									}
									else{
										str = BSG.renderSnake(list[m].body[j-1],list[m].body[j],next,-1,isdead,colour);
									}
									break;
								}
							}
							if(str){
								break;
							}
						}
						if(!str){
							//check if cell holds food
							list = BSG.obj.board.food;
							for(m=0; m<list.length; m++){
								if(list[m].x == v && list[m].y == i){
									//str = "F"+m;
									str = "<div class='fooddot'></div>";
									break;
								}
							}
						}
						if(str){
							newCell.innerHTML = str;
						}
						newRow.appendChild(newCell);
					}
					BSG.table.appendChild(newRow);
				}
				
			},
			
			renderSnake: function(prev,curr,next,idx,isdead,colour){
				let str = "", cls = "";
				if(colour){
					colour = " style='background-color:#"+colour+"'";
				}
				//connect to previous cell
				if(prev){
					//x is different
					if(prev.x != curr.x){
						if(prev.x < curr.x){
							cls = "xleft";
						}
						else{
							cls = "xright";
						}
					}
					//y is different
					else{
						if(prev.y < curr.y){
							cls = "yup";
						}
						else{
							cls = "ydown";
						}
					}
					if(isdead){
						cls += " deadsnake";
					}
					str += "<div class='"+cls+"'"+colour+"></div>";
				}
				else{
					cls = "snakehead";
					if(isdead){
						cls += " deadsnake";
					}
					if(idx >= 0){
						str += "<div class='"+cls+"'"+colour+">"+(idx+1)+"</div>";
					}
					else{
						str += "<div class='"+cls+"'"+colour+"></div>";
					}
				}
				if(next){
					//x is different
					if(curr.x != next.x){
						if(curr.x < next.x){
							cls = "xright";
						}
						else{
							cls = "xleft";
						}
					}
					//y is different
					else{
						if(curr.y < next.y){
							cls = "ydown";
						}
						else{
							cls = "yup";
						}
					}
					if(isdead){
						cls += " deadsnake";
					}
					str += "<div class='"+cls+"'"+colour+"></div>";
				}
				return str;
			}
		};
		
		function onload(){
			BS.init();
			console.log("loaded");
		}
		window.addEventListener("load",onload,false);
	</script>
	<style type="text/css">
		*{
			padding: 0px;
			margin: 0px;
		}
		div{
			padding: 5px;
		}
		.abtn{
			padding: 3px;
			color: blue;
			border: 1px solid #a0a0a0;
			background-color: #eee;
			border-radius: 3px;
			cursor: pointer;
		}
		table{
			border-collapse: collapse;
			display: inline-table;
		}
		#snaketable td{
			padding: 5px;
		}
		.tabtable{
			width: 100%;
		}
		.tabtable td{
			text-align: center;
			border: 1px solid;
			border-bottom: none;
			height: 30px;
			cursor: pointer;
		}
		.tabtable .untabbed{
			border-bottom: 1px solid;
			background-color: #eee;
		}
		#gametable{
			vertical-align: top;
		}
		#gametable td{
			width: 30px;
			height: 30px;
			border: 1px solid;
			position: relative;
			z-index: 1;
		}
		#snakediv{
			display: inline-block;
			padding: 15px;
		}
		#snakediv div{
			padding: 5px;
		}
		.snakestatus{
			font-style: italic;
			height: 15px;
		}
		.boardtable td{
			padding: 5px;
		}
		
		#gametable td div{
			position: absolute;
			background-color: black;
			padding: 0px;
		}
		.fooddot{
			left: 10px;
			top: 10px;
			border-radius: 5px;
			width: 10px;
			height: 10px;
			background-color: red !important;
		}
		.deadsnake{
			opacity: 0.5;
		}
		.snakehead{
			left: 5px;
			top: 5px;
			border-radius: 10px;
			width: 20px;
			height: 20px;
			color: white;
		    text-align: center;
			z-index: 3;
		}
		.xleft{
			left: -1px;
			width: 65%;
			height: 10px;
			top: 10px;
			z-index: 2;
		}
		.xright{
			right: -1px;
			width: 65%;
			height: 10px;
			top: 10px;
			z-index: 2;
		}
		.yup{
			top: -1px;
			height: 65%;
			width: 10px;
			left: 10px;
			z-index: 2;
		}
		.ydown{
			bottom: -1px;
			height: 65%;
			width: 10px;
			left: 10px;
			z-index: 2;
		}
	</style>
</head>
<body>
	<h1>JS Battlesnake</h1>
	<table class="tabtable">
		<tr>
			<td>Setup</td>
			<td class="untabbed">Game</td>
		</tr>
	</table>
	<div id="setupdiv">
		<h2>Snakes</h2>
		<table id="snaketable">
			<tr>
				<td>Github</td>
				<td>Name</td>
				<td>URL</td>
				<td></td>
			</tr>
			<tr>
				<td><input type="text" id="github"/></td>
				<td><input type="text" id="name"/></td>
				<td><input type="text" id="url"/></td>
				<td><a class="abtn" onclick="BS.addSnake();">add</a></td>
			</tr>
		</table>
		<p>&nbsp;</p>
		<h3>Board Size - Standard Game / Default</h3>
		<table class="boardtable">
			<tr>
				<td>
					<p>Current</p>
					<div id="boardcurrent"></div>
				</td>
				<td>
					X: <input type="number" id="boardx"/>
					<br/>
					Y: <input type="number" id="boardy"/>
				</td>
				<td>
					<a class="abtn" onclick="BS.setBoard();">set board</a>
				</td>
			</tr>
		</table>
		<p>&nbsp;</p>
		<h3>Scenarios</h3>
		<p><i>Configure what type of game mode is to be played.</i></p>
		<select id="scenarios">
			<option value="standard">Standard Game</option>
		</select>
	</div>
	<div id="gamediv" style="display:none;">
		<div>
			<a class="abtn" onclick="BS.startClick();">start</a>
			<a class="abtn" onclick="BSG.stop();">stop</a>
			<a class="abtn" onclick="BSG.pause();">pause</a>
			<a class="abtn" onclick="BSG.back();">back</a>
		</div>
		<table id="gametable"></table>
		<div id="snakediv"></div>
	</div>
</body>
</html>